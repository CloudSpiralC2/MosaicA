package jp.cspiral.mosaica;

import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import javax.imageio.ImageIO;

import jp.cspiral.mosaica.BasicDBObject;
import jp.cspiral.mosaica.ChildImage;
import jp.cspiral.mosaica.DBObject;
import jp.cspiral.mosaica.MongoException;
import jp.cspiral.mosaica.ParentImage;
import jp.cspiral.mosaica.String;

import com.sun.jersey.core.util.Base64;

public class ImageController {

	/**
	 * 画像をMIMEエンコードし文字列に変換します
	 * @param image 画像オブジェクト
	 * @return MIMEエンコードされた文字列
	 * @author niki
	 */
	public String encode(BufferedImage image) throws IOException {
		//まずバイナリ表現に変換
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
	    BufferedOutputStream os = new BufferedOutputStream(bos);
	    image.flush();
	    ImageIO.write(image, "jpg", os); //拡張子は一応jpgにしています．引数でセットするほうがいいかも？
	    os.flush();
	    os.close();

	    //文字列に変換
		String encodedImage = new String(Base64.encode(bos.toByteArray()), "UTF-8");
		StringBuilder sb = new StringBuilder();
		sb.append(encodedImage);
		sb.insert(0, "data:image/jpg;base64,");
		return new String(sb);
	}

	/**
	 * MIMEエンコードされた文字列を画像に変換します
	 * @param mime MIMEエンコードされた文字列
	 * @return image 画像オブジェクト
	 * @author niki
	 */
	public BufferedImage decode(String mime) throws IOException{
		mime = mime.replaceAll("data:image/.*;base64,", "");//この文字列が先頭にくっついてるとダメみたいなので削除
		ByteArrayInputStream input = new ByteArrayInputStream(Base64.decode(mime));
		BufferedImage image = ImageIO.read(input);
		return image;
	}

	/**
	 * DBに保存されたParentImageを読み出す
	 * @param imageId 画像に一意に設定されたID
	 * @return ParentImage 親画像オブジェクト
	 * @author niki
	 */
	public ParentImage getImage(String imageId) throws MongoException{
		ParentImage pImage = new ParentImage();

		pImage.setImageId(imageId);

		db = DBUtils.getInstance().getDb();
		coll = db.getCollection(DB_COLLECTION);

		DBObject query = new BasicDBObject("imageId", imageId);
		DBObject result = coll.findOne(query);

		pImage.setSrc((String) result.get("src"));
		pImage.setSizeX((int) result.get("sizeX"));
		pImage.setSizeY((int) result.get("sizeY"));
		pImage.setDivX((int) result.get("divX"));
		pImage.setDivY((int) result.get("divY"));

		ChildImage[] childImage = new ChildImage[pImage.getDivX() * pImage.getDivY()];

		DBObject children = (DBObject)result.get("children");
		for(int i=0; i<pImage.getDivX() * pImage.getDivY(); i++){
			ChildImage cImage = new ChildImage();
			DBObject child = (DBObject)children.get("child");
			cImage.setSrc((String)child.get("src"));
			cImage.setUrl((String)child.get("url"));
			cImage.setX((int)child.get("x"));
			cImage.setY((int)child.get("y"));

			childImage[i] = cImage;
		}

		pImage.setChildren(childImage);

		return pImage;
	}
}