package jp.cspiral.mosaica;

import java.util.logging.Logger;

import com.mongodb.DB;
import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.MongoException;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.awt.image.RasterFormatException;

import javax.imageio.ImageIO;

import jp.cspiral.mosaica.util.DBUtils;

public class ImageController_hayata {
	/**
	 * 親イメージオブジェクト
	 */
	ParentImage parentImage = new ParentImage();
	/**
	 * 親イメージの画像
	 */
	BufferedImage image = null;

	/**
	 * Mongoのコレクション名
	 */
	private final String DB_COLLECTION = "";
	/**
	 * Loggerオブジェクト
	 */
	private Logger logger;
	/**
	 * DBオブジェクト
	 */
	private DB db;
	/**
	 * DBCollectionオブジェクト
	 */
	private DBCollection coll;

	ImageController_hayata(){

	}

	public void createParentImage(String img) throws IOException {
		try {
			String status = new String("processing");

			// 元画像をデコード
			image = decode(img);

			// 元画像の情報をparentImageに入れる
		//	parentImage.setDivX(divX);
		//	parentImage.setDivY(divY);
			parentImage.setSizeX(image.getWidth());
			parentImage.setSizeY(image.getHeight());
			parentImage.setStatus(status);

			// 分割
			BufferedImage[] splitedImages = splitImage();

			// それぞれの子イメージに対して，エンコードと類似画像検索を行う
			int divX = parentImage.getDivX();
			int divY = parentImage.getDivY();
			int sizeX = parentImage.getSizeX();
			int sizeY = parentImage.getSizeY();
			int width = sizeX / divX;
			int height = sizeY / divY;
			ChildImage[] children = new ChildImage[divX * divY];

			for(int i=0; i<divX * divY; i++){
				// 画像を文字列にエンコード
				String nameOfChildImage = encode(splitedImages[i]);
				// childImageをnew = googleに投げる
				ChildImage child = sendGoogle();
				children[i] = child;

			}
			// 子イメージリストをparentImageに追加する
			parentImage.setChildren(children);

			// ParentImageをDBに保存
			db = DBUtils.getInstance().getDb();
			coll = db.getCollection(DB_COLLECTION);
			// DBObjectの生成
			DBObject query = new BasicDBObject();
			DBObject childrenQuery = new BasicDBObject();
			// <Image>
			query.put("src", parentImage.getSrc());
			query.put("divX", divX);
			query.put("divY", divY);
			query.put("status", "done");
			// ---- <child>
			for(int i=0; i<divX * divY; i++){
				DBObject childQuery = new BasicDBObject();
				childQuery.put("src", children[i].getSrc());
				childQuery.put("x", children[i].getX());
				childQuery.put("y", children[i].getY());
				childQuery.put("url", children[i].getUrl());

				childrenQuery.put("child", childQuery);
			}
			// -- <children>
			query.put("children", childrenQuery);

			// DBに保存
			coll.insert(query);

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 親イメージをx*yの子イメージ配列に分割する
	 *
	 * @return 子イメージ配列(ChildImage[] -> BufferedImage[])
	 * @author hayata
	 */
	public BufferedImage[] splitImage() throws RasterFormatException {
		int divX = parentImage.getDivX();
		int divY = parentImage.getDivY();
		int sizeX = parentImage.getSizeX();
		int sizeY = parentImage.getSizeY();
		int width = sizeX / divX;
		int height = sizeY / divY;
		BufferedImage[] child = new BufferedImage[divX * divY];

		try {
			for (int i = 0; i < divY; i++) {
				for (int j = 0; j < divX; j++) {
					child[i * divX + j] = null;
					child[i * divX + j] = image.getSubimage(j * divX, i * divY,
							width, height);
				}
			}
		} catch (RasterFormatException rfe) {
			rfe.printStackTrace();
		}

		return child;
	}
}
